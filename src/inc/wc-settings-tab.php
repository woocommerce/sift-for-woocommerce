<?php declare( strict_types=1 );

// phpcs:disable WordPress.NamingConventions.ValidVariableName.UsedPropertyNotSnakeCase

namespace Sift_For_WooCommerce\WC_Settings_Tab;

use Sift_For_WooCommerce\Sift_For_WooCommerce;

use const Sift_For_WooCommerce\Sift_For_WooCommerce\FILTER_EVENT_ENABLE_PREFIX;

/**
 * Filter to slip in our settings tab.
 *
 * @param array $settings_tabs An associative array of the existing tabs.
 *
 * @return array
 */
function add_settings_tab( array $settings_tabs ) {
	$settings_tabs['sift_for_woocommerce'] = __( 'Sift for WooCommerce', 'sift-for-woocommerce' );
	return $settings_tabs;
}

/**
 * Callback to render the woocommerce settings as defined by `get_settings()` below.
 *
 * @return void
 */
function settings_tab() {
	woocommerce_admin_fields( get_sift_for_woocommerce_sift_settings() );
	woocommerce_admin_fields( get_sift_for_woocommerce_events_settings() );
}

function enqueue_checkboxes_sync_js() {
	wp_enqueue_script( 'checkboxes-sync', plugin_dir_url( __FILE__ ) . 'checkboxes-sync.js', array(), '1.0' );
}

/**
 * Callback to update the woocommerce settings as defined by `get_settings()` below.
 *
 * @return void
 */
function update_settings() {
	woocommerce_update_options( get_sift_for_woocommerce_sift_settings() );
	woocommerce_update_options( get_sift_for_woocommerce_events_settings() );

}

/**
 * Method to enumerate and describe the woocommerce Sift settings for our plugin.
 *
 * @return array
 */
function get_sift_for_woocommerce_sift_settings() {
	$test_credentials = null;

	/**
	 * Due to how WooCommerce handles updates to options -- posting to itself, rather
	 * than another url and then redirecting back to the options page -- this test
	 * could inadvertently cache the prior credentials in a static variable if it's
	 * fired on this action.
	 */
	if ( ! doing_action( 'woocommerce_update_options_sift_for_woocommerce' ) ) {
		$test_credentials = test_api_credentials_result();
	}

	$settings = array(
		'section_title'    => array(
			'name' => __( 'Sift API', 'sift-for-woocommerce' ),
			'type' => 'title',
			'desc' => __( 'The WooCommerce - Sift integration will enable the Decision business logic flow on Sift servers to manage actions on your web store.  The ID and Keys are both alphanumerical, and can be found at <a target="_blank" href="https://console.sift.com/developer/api-keys">https://console.sift.com/developer/api-keys</a>', 'sift-for-woocommerce' ),
			'id'   => 'wc_sift_for_woocommerce_section_sift_title',
		),
		'account_id'       => array(
			'name' => __( 'Sift Account ID', 'sift-for-woocommerce' ),
			'type' => 'text',
			'desc' => __( 'The Sift Account ID.  Make sure you are using the correct Account ID and API Key for either Production or Sandbox environments.', 'sift-for-woocommerce' ),
			'id'   => 'wc_sift_for_woocommerce_sift_account_id',
		),
		'api_key'          => array(
			'name' => __( 'Sift API Key', 'sift-for-woocommerce' ),
			'type' => 'text',
			'desc' => __( 'This is the API key.', 'sift-for-woocommerce' ),
			'id'   => 'wc_sift_for_woocommerce_sift_api_key',
		),
		'test_credentials' => array(
			'type' => 'info',
			'text' => $test_credentials,
		),
		'beacon_key'       => array(
			'name' => __( 'Sift Beacon Key', 'sift-for-woocommerce' ),
			'type' => 'text',
			'desc' => __( 'This is the Beacon key used in the Javascript snippets.', 'sift-for-woocommerce' ),
			'id'   => 'wc_sift_for_woocommerce_sift_beacon_key',
		),
		'webhook_key'      => array(
			'name' => __( 'Sift Signature / Webhook Key', 'sift-for-woocommerce' ),
			'type' => 'text',
			'desc' => __( 'This is the 40-character (SHA-1) or 64-character (SHA-256) key that will be used to authenticate webhook requests generated by decisions. <a href="https://sift.com/developers/docs/php/decisions-api/decision-webhooks/authentication">API Documentation on this can be read on the Sift API website.</a>', 'sift-for-woocommerce' ),
			'id'   => 'wc_sift_for_woocommerce_sift_webhook_key',
		),
		'section_end'      => array(
			'type' => 'sectionend',
			'id'   => 'wc_sift_for_woocommerce_sift_section_end',
		),
	);

	if ( empty( $test_credentials ) ) {
		unset( $settings['test_credentials'] );
	}

	return apply_filters( 'sift_for_woocommerce_sift_settings', $settings ); // phpcs:ignore WordPress.NamingConventions.PrefixAllGlobals.NonPrefixedHooknameFound
}

/**
 * Method to enumerate and describe the woocommerce Events settings for our plugin.
 *
 * @return array
 */
function get_sift_for_woocommerce_events_settings() {

	$events = array(
		'Content Abuse' => array(
			'$create-content'           => array(
				'url' => 'https://developers.sift.com/docs/curl/events-api/reserved-events/create-content'
			),
			'$update_content'           => array(
				'url' => 'https://developers.sift.com/docs/curl/events-api/reserved-events/update-content'
			),
			'$content_status'           => array(
				'url' => 'https://developers.sift.com/docs/curl/events-api/reserved-events/content_status'
			),
			'$flag-content'             => array(
				'url' => 'https://developers.sift.com/docs/curl/events-api/reserved-events/flag-content'
			),
			'$create_content (review)'  => array(
				'key' => 'create_content_review',
				'id'  => 'create-content', // Allow preventing duplication with keys
				'url' => 'https://developers.sift.com/docs/curl/events-api/reserved-events/create-content/review'
			),
			'$create_content (message)' => array(
				'key' => 'create_content_message',
				'id'  => 'create-content', // Allow preventing duplication with keys
				'url' => 'https://developers.sift.com/docs/curl/events-api/reserved-events/create-content/message'
			)
		),
		'Promo Abuse' => array(
			'$create-account' => array(
				'desc'     => __( 'if promotions are added at account creation.', 'sift-for-woocommerce' ),
				'url'      => 'https://developers.sift.com/docs/curl/events-api/reserved-events/create-account'
			),
			'$create-order' => array(
				'desc'     => __('if promotions are applied on the order.', 'sift-for-woocommerce' ),
				'url'      => 'https://developers.sift.com/docs/curl/events-api/reserved-events/create-order'
			),
			'$add-promotion'  => array(
				'desc' => __( 'if promotions are applied as a separate event.', 'sift-for-woocommerce' ),
				'url'  => 'https://developers.sift.com/docs/curl/events-api/reserved-events/add-promotion'
			)
		),
		'Payment Abuse' => array(
			'$transaction'  => array( 'url' => 'https://developers.sift.com/docs/curl/events-api/reserved-events/transaction' ),
			'$create-order' => array(
				'key' => 'create_order_payment_abuse',
				'id'  => 'create-order',
				'url' => 'https://developers.sift.com/docs/curl/events-api/reserved-events/create-order' ),
			'$update-order' => array( 'url' => 'https://developers.sift.com/docs/curl/events-api/reserved-events/update-order' ),
			'$chargeback'   => array( 'url' => 'https://developers.sift.com/docs/curl/events-api/reserved-events/chargeback' )
		),
		'Account Abuse' => array(
			'$create-account' => array(
				'key' => 'create_account_account_abuse',
				'id'  => 'create-account',
				'url' => 'https://developers.sift.com/docs/curl/events-api/reserved-events/create-account' ),
			'$update-account' => array( 'url' => 'https://developers.sift.com/docs/curl/events-api/reserved-events/update-account' ),
		)
	);

	$events_settings_array = build_events_settings_events_array( $events );

	$settings = array(
		'section_title'    => array(
			'name' => __( 'Sift Events', 'sift-for-woocommerce' ),
			'type' => 'title',
			'desc' => __( 'The events sent to Sift <a target="_blank" href="https://developers.sift.com/tutorials/add-an-abuse-type">https://developers.sift.com/tutorials/add-an-abuse-type</a>', 'sift-for-woocommerce' ),
			'id'   => 'wc_sift_for_woocommerce_section_events_title',
		),
	);

	foreach ( array_keys( $events_settings_array ) as $key ) {
		$settings[ $key ] = $events_settings_array[$key];
	}

	$settings['section_end'] = array(
			'type' => 'sectionend',
			'id'   => 'wc_sift_for_woocommerce_section_events_end',
	);

	return apply_filters( 'sift_for_woocommerce_events_settings', $settings ); // phpcs:ignore WordPress.NamingConventions.PrefixAllGlobals.NonPrefixedHooknameFound
}

/**
 * @param array $events
 *
 * @return array[]
 */
function build_events_settings_events_array( array $events): array {

	$settings= array();
	foreach ( array_keys( $events ) as $abuse_key ) {
		$content_key = str_replace( ' ', '_', strtolower( $abuse_key ) );
		$settings[ $content_key . '_subtitle'] = array(
			'type' => 'title',
			'desc' => '<h4>' . __( $abuse_key, 'sift-for-woocommerce' ) . '</h4>',
			'id'   => 'wc_sift_for_woocommerce_section_events_title_' . $content_key,
		);
		foreach ( $events[ $abuse_key ] as $event_name => $event_settings ) {
			$event_key = $event_settings['key'] ?? str_replace( array( ' ', '(', ')' ), '_', strtolower( $event_name ) );
			$event_key = str_replace( '$', '', $event_key );
			$event_id = $event_settings['id'] ?? $event_key;
			$event_id = str_replace( '-', '_', $event_id );
			// Allow to disable from sidecar plugin
			$disabled = apply_filters( FILTER_EVENT_ENABLE_PREFIX . $event_id, $event_settings['disabled'] ?? false );

			$description = '';
			if( isset( $event_settings['desc'] ) ) {
				$description = ' - <i>' . $event_settings['desc'] . '</i> ';
			}

			$settings[ $event_key . '_event'] = array(
				'type' => 'checkbox',
				'field_name' => FILTER_EVENT_ENABLE_PREFIX . $event_id,
				'disabled' => $disabled,
				'desc' => __( $event_name . ' '. $description . '<small><a target="_blank" href="'. $event_settings['url'] .'">' . __( '(documentation)', 'sift-for-woocommerce' ) . '</a></small>', 'sift-for-woocommerce' ),
				'id'   => FILTER_EVENT_ENABLE_PREFIX . $event_id,
			);
		}
		$settings[ $content_key . '_subtitle_end'] = array(
			'name' => __( $abuse_key, 'sift-for-woocommerce' ),
			'type' => 'sectionend',
			'desc' => __( $abuse_key, 'sift-for-woocommerce' ),
			'id'   => 'wc_sift_for_woocommerce_section_events_end_' . $content_key,
		);
	}

	return $settings;

}

/**
 * Test the credentials to see if we can list all webhooks...
 *
 * @param string|null $api_key    The API Key that we're testing out. If omitted, will attempt to use the stored option.
 * @param string|null $account_id The Account ID that we're testing out. If omitted, will attempt to use the stored option.
 *
 * @return null|string
 */
function test_api_credentials_result( $api_key = null, $account_id = null ) {
	if ( empty( $api_key ) ) {
		$api_key = get_option( 'wc_sift_for_woocommerce_api_key' );
	}
	if ( empty( $account_id ) ) {
		$account_id = get_option( 'wc_sift_for_woocommerce_account_id' );
	}

	if ( ! $account_id || ! $api_key ) {
		return null;
	}

	// TODO: Maybe find a way to leverage the Sift PHP API Client to fire these requests, rather than ad-hoc'ing together an alternate solution.

	$client   = Sift_For_WooCommerce::get_api_client();
	$response = $client->listAllWebhooks();

	$code   = $response->httpStatusCode;
	$data   = $response->body;
	$return = null;

	if ( 200 === $code ) {
		$return = sprintf( '<h4>%s</h4>', __( 'Credentials are valid!', 'sift-for-woocommerce' ) );
		// translators: %d: integer.
		$return .= '<p>' . sprintf( __( 'There are presently %d webhooks configured.', 'sift-for-woocommerce' ), intval( $data['total_results'] ) ) . '</p>';

		$webhook_url = rest_url( 'sift-for-woocommerce/v1/decision' );
		// translators: %s: url
		$return .= '<p>' . sprintf( __( 'The webhook url for this site is: <kbd>%s</kbd>', 'sift-for-woocommerce' ), esc_html( $webhook_url ) ) . '</p>';

		if ( set_url_scheme( $webhook_url, 'https' ) !== $webhook_url ) {
			$return .= sprintf( '<p>%s</p>', __( '<strong class="wp-ui-text-notification">It looks like your site may not be configured to use HTTPS!</strong> Sift requires webhooks to be served over HTTPS urls. <a href="https://wordpress.org/documentation/article/https-for-wordpress/">Learn how to fix this?</a>', 'sift-for-woocommerce' ) );
		}
	} elseif ( 401 === $code ) {
		$return  = sprintf( '<h4 class="wp-ui-text-notification">%s</h4>', __( 'Error!', 'sift-for-woocommerce' ) );
		$return .= sprintf( '<p>%s</p>', __( 'The credentials supplied are not valid.', 'sift-for-woocommerce' ) );

		wc_get_logger()->log(
			'error',
			'Invalid API Credentials.',
			array(
				'source' => 'sift-for-woocommerce',
			)
		);
	} else {
		$return = sprintf( '<h4 class="wp-ui-text-notification">%s</h4>', __( 'Error!', 'sift-for-woocommerce' ) );
		// translators: %d: three digit integer
		$return .= '<p>' . sprintf( __( 'API HTTP Code: <strong>%d</strong>', 'sift-for-woocommerce' ), intval( $code ) ) . '</p>';
		$return .= '<pre>' . esc_html( $response->rawResponse ) . '</pre>';
	}

	return $return;
}
